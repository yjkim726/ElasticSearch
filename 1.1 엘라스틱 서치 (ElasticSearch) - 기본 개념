1 엘라스틱서치란?

아파치 루신(Apache Lucene)을 기반으로 개발된 오픈소스 분산 검색엔진(서버)
특징으로는
1.분산 / 확장성
규모가 수평적으로 늘어나도록 설계가 되어있기에, 더 많은 용량이 필요하면 노드를 추가하고 클러스터가 인식할수 있도록 설정하면 된다
같은 클러스터 내라면 초기설정 그대로도 노드끼리 연결되지만, 다른 클러스터에 있다면 설정이 필요
2.고가용성
동작 중에 죽은 노드를 감지하고 삭제하며 사용자의 데이터가 안전하고 접근가능하도록 유지한다
3.멀티 태넌시
클러스터는 여러개의 인덱스들을 저장/관리하며, 하나의 쿼리로 여러 인덱스의 데이터 검색이 가능하다

2 엘라스틱서치 기본 개념

 
1.클러스터
전체 데이터를 가지고 모든 노드 (서버)간의 통합 인덱싱 및 검색이 가능한 1개 이상의 노드 집합.
클러스터 명칭은 기본값이 elasticsearch 로 설정되지만, 고유한 명칭으로 구분된다.
각 노드는 1개의 클러스터에 소속된다.


2.노드
클러스터의 부분이 되는 단일 서버로써, 데이터를 저장하고 인덱싱과 검색 역할을 수행한다.
노드가 기동될 때 랜덤 UUID (Universally Unique IDentifier)를 기본값으로 하여 각각의 노드를 식별한다. 기본값을 원치 않는다면 각각의 노드에 명명할 수 있다.
아무런 설정없이 동일 네트워크 상에서 다수의 노드를 기동하게 된다면, elasticsearch 라는 이름으로 단일 클러스터가 자동으로 구성된다.


3.인덱스
비슷한 형질을 가지는 문서 간의 집합 (예: 고객정보, 제품카탈로그, 주문정보 등)
인덱스 명칭은 소문자로 구성되며, 문서에 대한 인덱싱/검색/갱신/삭제 등을 수행할 때 참조값으로 사용된다.
단일 클러스터에서 원하는 대로 다수의 인덱스를 정의할 수 있다.


4.타입
인덱스 안에 1개 이상의 도큐먼트 (document, 검색 데이터의 최소 단위) 타입을 정의 할 수 있다
일반적으로 문서의 공통 속성들을 가지고 정의된다. (예: 블로그 검색 시스템을 구성하고 단일 인덱스에 모든 데이터를 구성한다고 하면 타입은 사용자, 블로그, 댓글로 구분)


5.문서 (document)
문서는 인덱싱된 정보의 기본 단위 (예: 하나의 고객 정보, 제품 정보, 주문 정보)
문서는 어디든 호환이 가능한 JSON 으로 구성된다.
인덱스/타입과 함께 원하는 만큼의 문서를 저장할 수 있다. 문서는 물리적으로 인덱스에 있기는 하지만, 반드시 인덱스 안에 있는 타입을 기준으로 인덱싱/할당 되어야 한다.



6.Shards (파편) & Replicas (복제본)
인덱스는 자체로는 단일 노드의 하드웨어 한계를 초과하는 정보를 저장할 수 있어야 할 것이다. 예로 백만개의 문서 인덱스는 아마 1TB 정도의 디스크 용량을 사용하고 단일 노드에 들어가지 않거나, 검색요청을 처리하는데 많이 느릴 것이다.
이 문제를 해결하기 위해서 elasticsearch는 파편 (shard) 이라고 불리는 조각으로 인덱스를 나눈다.
파편은 인덱스를 만들 때, 최대 5개까지 원하는 만큼 정의할 수 있다.
파편은 클러스터의 노드에 상주하고 있는 모든 기능을 할 수 있는 독립적인 인덱스라고 할 수 있다.
Figure 2. Shard relocating

파편은 두가지 이유로 중요하다.
•데이터 분량을 수평적으로 분할하거나 확장할 수 있다.
•파편별 (곧 결국은 노드별)로 분산/병렬 처리를 하여 성능/출력을 향상시킬 수 있다.
(이 때, 검색 요청을 처리하기 위하여 파편의 분할과 문서로의 병합은 전적으로 elasticsearch가 처리하기 때문에 사용자는 고민하지 않아도 된다.)

가용성: 언제 장애가 발생할지 모르는 네트워크/클라우드 같은 환경의 경우에는 파편/노드가 어느 이유든 오프라인 또는 중단에 대한 장애조치 방법으로 유용하고 적극 권장한다.
이것을 위해 Elasticsearch는 복제 파편(또는 복제본) 이라고 불리는 인덱스 파편의 복사본을 1개 이상 만들 수 있게 해 준다.


복제 또한 두가지 이유로 중요하다.
•파편/노드의 장애에 대응하는 고가용성을 제공하며, 이러한 이유로 복제본은 원본과 동일한 노드에 저장하지 않는 것이 중요하다.
•검색을 모든 복제본에서 병렬적으로 처리하여 검색분량/결과를 확장할 수 있도록 한다.

기본적으로 Elasticsearch의 인덱스는 5개의 파편으로 구성되고 1개의 복제본을 가진다.
다시 말해 적어도 2개 이상의 노드로 구성하면 인덱스는 5개의 파편과 5개의 복제파편(1개의 완벽한 복제본)으로 구성되어 인덱스당 총 10개의 파편이 있게 된다




3 RDBMS와 ElasticSearch 개념 비교

 



RDBMS

ElasticSearch

데이터베이스 (DataBase) 인덱스 (index) 
테이블 (Table) 타입 (Type) 
열 (Row) 도큐먼트 (Document) 
행 (Column) 필드 (Field) 
스키마 (Schema) 매핑 (Mapping) 

4 매핑 및 타입
1.매핑이란?
mapping은 관계형 데이터베이스(RBDMS)의 schema와 비슷한 개념으로, Elasticsearch의 index에 들어가는 데이터의 타입을 정의하는 것이다. 
물론 그 외에도 수 많은 기능을 설정하는 기능이 있지만 결국 mapping의 가장 중요한 역할은 데이터의 유형을 정의하고, 그 데이터를 어떻게 index하는지 결정하는 것이다.


2. 매핑 데이터 타입

2-1 핵심 데이터 타입 
● 문자열(String) 데이터 타입
    ○ text : 설명이나 길이가 긴 텍스트 값을 포함한 필드에서 전문 텍스트 검색을 할 때 유용하다 텍스트 타입을 가진 필드는 색인 전에 분석을 거쳐 전문 텍스트 검색에 활용된다
    ○ keyword : 문자열 필드 분석이 가능한 데이터 타입이다 해당 타입을 가진 필드는 정렬, 필터링, 집계 기능을 지원한다
● 숫자(Numeric) 데이터 타입
    ○ byte, short, integer, long
    ○ float, double : 32bit, 64bit 표현이 가능한 부동 소수점 수
    ○ half_float : 16bit 표현하는 부동 소수점 수
    ○ scaled_float : 길고 고정된 비율을 기반으로 한 부동 소수점 수
● 날짜 데이터 타입
    ○ date : 밀리초 단위로 정밀한 타임스탬프를 저장할 수 있는 데이터 타입
● 논리(Boolean) 데이터 타입
    ○ boolean : 모든 프로그래밍 언어에서 공통으로 사용하는 논리 데이터 타입
● 이진(Binary) 데이터 타입
    ○ binary : Basee64 인코딩을 수행한 후, 임의의 이진값을 저장할 수 있는 데이터 타입
● 범위(Range) 데이터 타입
    ○ integer_range, float_range, long_range, double_range, date_range : 정수, 실수 등 다양한 범위를 정의하는 데이터 타입

2-2 복합 데이터 타입
● 배열 / 객체 / 중첩 데이터 타입

2-3 기타 데이터 타입 (엘라스틱 지원)
● 지리(Geo-point) 데이터 타입
    ○ 경도와 위도를 저장하는데 사용
● 지형(Geo-shape) 데이터 타입
    ○ 다각형, 지도 등 지형을 저장하는데 사용
● IP 데이터 타입
    ○ IPv4 와 IPv6 주소를 저장하는 데 사용한다
3.매핑 예

JSON 형태로 도큐먼트 데이터를 입력, 해당 인덱스를 가지고 올 경우


매핑이 설정되어 있지 않는 경우, 텍스트타입의 경우 type, keyword의 두가지 종류, price 와 같이 가격을 나타내는 데이터는 float 타입으로 자동 매핑 된다.



5 CRUD 연산

데이터 저장소에서 요구하는 기본적인 작업인 CRUD ( create , read, update, delete ) 연산을 수행하는 방법

엘라스틱 서치는 REST API를 준수하며, CRUD 대상은 도큐먼트를 대상으로 한다

 
1.색인 API
●  ID를 제공하지 않고 도큐먼트 색인하기

●  ID를 제공하고 도큐먼트 색인하기


2 조회 API

GET index : index 설정 및 type 설정 확인 가능
GET index/ type_name / document_id ( 기본키 및 지정 ID 둘다 가능 ) : 해당  document 데이터 확인 가능

3 업데이트 API

기존 document에 새롭게 추가가 가능하며, 자동으로 매핑이 됩니다



4 삭제 AP



6-1 RESTFul API


curl -XGET 'localhost:9200/us_index4,us_index3/_search?pretty&scroll=10m&size=10000' -d'{  "_source": {        "includes": [ "SKEY",        "UD"]    },  "query": {    "bool": {      "must": [        {         "query_string": {            "query": "hybrid car",            "fields": ["AB"],             "default_operator": "OR",            "analyze_wildcard": false          }        }      ]  ,       "must_not": [        {          "query_string": {            "query": "electric",            "fields": ["AB"],            "default_operator": "AND",            "analyze_wildcard": false          }        }      ]    }  }}' -H 'Content-Type:application/json' > TEST



http://www.jopenbusiness.com/mediawiki/ElasticSearch_-_REST_API#REST_API.C2.A0.EA.B8.B0.EB.B3.B8_.EA.B5.AC.EC.A1.B0

6 인덱스 생성 및 매핑 관리

 

 

(출처 : http://yookeun.github.io/elasticsearch/2018/03/09/elastic-mapping/   http://guruble.com/elasticsearch-2-shard-replica/  http://jjeong.tistory.com/854)

 
